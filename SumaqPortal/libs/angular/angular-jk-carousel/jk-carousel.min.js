!function () { "use strict"; angular.module("jkAngularCarousel", ["jkAngularCarousel.templates"]) }(), function () { "use strict"; function CarouselController($timeout, $attrs, $interval) { var that = this; that.currentIndex = 0, that.currentMarginLeftValue = 0, that.radioButtonIndex = 0, that.transitionsTime = 500, that.transitionsEnabled = !0, void 0 === that.autoSlide && (that.autoSlide = !1), void 0 === that.autoSlideTime && (that.autoSlideTime = 5e3), that.registerElement = function (element) { that.element = element, that.slidesContainer = angular.element(that.element.find("div")[0]) }, $attrs.$observe("data", function () { that.onDataChange() }), $attrs.$observe("autoSlide", function () { that.autoSlide = "true" === that.autoSlide, that.validateAutoSlide() }), $attrs.$observe("autoSlideTime", function () { that.autoSlideTime = parseInt(that.autoSlideTime), that.restartAutoSlide() }), that.onDataChange = function () { that.isDataInvalidOrTooSmall() || (that.executeCloneData(), $timeout(function () { that.updateSlidesContainerWidth(), that.restartFromFirstItem() })) }, that.updateSlidesContainerWidth = function () { that.elementWidth = that.element.prop("offsetWidth"), that.slidesContainer.css("width", that.elementWidth * that.cloneData.length + "px") }, that.restartFromFirstItem = function () { that.elementWidth && (that.disableTransitions(), that.currentMarginLeftValue = -1 * that.elementWidth, that.applyMarginLeft(), that.currentIndex = 0, that.radioButtonIndex = that.currentIndex, that.enableTransitions()) }, that.executeCloneData = function () { for (var cloneArray = [], index = 0; index < that.data.length; index++) { var item = that.data[index]; cloneArray.push(item) } that.cloneFirstItem(cloneArray), that.cloneLastItem(cloneArray), that.cloneData = cloneArray }, that.cloneFirstItem = function (cloneArray) { var firstItem = cloneArray[0], firstItemClone = angular.copy(firstItem); cloneArray.push(firstItemClone) }, that.cloneLastItem = function (cloneArray) { var lastItem = cloneArray[that.data.length - 1], lastItemClone = angular.copy(lastItem); cloneArray.unshift(lastItemClone) }, that.validateAutoSlide = function () { that.autoSlide ? that.startAutoSlide() : that.stopAutoSlide() }, that.restartAutoSlide = function () { that.autoSlide && (console.log("Restarting auto slide..."), that.transitionsEnabled ? $timeout(function () { that.stopAutoSlide(), that.startAutoSlide() }, that.transitionsTime) : (that.stopAutoSlide(), that.startAutoSlide())) }, that.startAutoSlide = function () { angular.isDefined(that.autoSlideInterval) || (console.log("Interval created..."), that.autoSlideInterval = $interval(function () { console.log("Interval called..."), that.navigateRight() }, that.autoSlideTime)) }, that.stopAutoSlide = function () { angular.isDefined(that.autoSlideInterval) && ($interval.cancel(that.autoSlideInterval), that.autoSlideInterval = void 0, console.log("Interval stopped...")) }, that.onNavigateLeft = function () { that.navigateLeft(), that.restartAutoSlide() }, that.navigateLeft = function () { that.isDataInvalidOrTooSmall() || (that.currentIndex--, that.radioButtonIndex = that.currentIndex, that.currentMarginLeftValue += that.elementWidth, that.applyMarginLeft(), that.restartAutoSlide(), -1 === that.currentIndex && that.restartFromLastItem()) }, that.restartFromLastItem = function () { $timeout(function () { that.disableTransitions(), that.currentMarginLeftValue = that.elementWidth * that.data.length * -1, that.applyMarginLeft(), that.currentIndex = that.data.length - 1, that.radioButtonIndex = that.currentIndex, that.enableTransitions() }, that.transitionsTime) }, that.onNavigateRight = function () { that.navigateRight(), that.restartAutoSlide() }, that.navigateRight = function () { that.isDataInvalidOrTooSmall() || (that.currentIndex++, that.radioButtonIndex = that.currentIndex, that.currentMarginLeftValue -= that.elementWidth, that.applyMarginLeft(), that.restartAutoSlide(), that.currentIndex === that.data.length && $timeout(function () { that.restartFromFirstItem() }, that.transitionsTime)) }, that.applyMarginLeft = function () { that.slidesContainer.css("margin-left", that.currentMarginLeftValue + "px") }, that.disableTransitions = function () { that.slidesContainer.css("transition", "none"), that.transitionsEnabled = !1 }, that.enableTransitions = function () { $timeout(function () { that.slidesContainer.css("transition", "margin 0.5s ease-in-out"), that.transitionsEnabled = !0 }, 200) }, that.onRadioButtonClick = function () { var multiplier; that.radioButtonIndex > that.currentIndex ? (multiplier = that.radioButtonIndex - that.currentIndex, that.currentMarginLeftValue -= that.elementWidth * multiplier) : (multiplier = that.currentIndex - that.radioButtonIndex, that.currentMarginLeftValue += that.elementWidth * multiplier), that.currentIndex = that.radioButtonIndex, that.applyMarginLeft(), that.restartAutoSlide() }, that.isDataInvalidOrTooSmall = function () { return that.data && 0 !== that.data.length && 1 !== that.data.length ? !1 : !0 } } angular.module("jkAngularCarousel").controller("CarouselController", ["$timeout", "$attrs", "$interval", CarouselController]) }(), function () { "use strict"; function CarouselDirective() { function link(scope, element, attrs, ctrl) { ctrl.registerElement(element), scope.$on("$destroy", function () { ctrl.stopAutoSlide() }) } return { restrict: "E", replace: !0, templateUrl: "carousel-directive.html", scope: {}, controller: "CarouselController", controllerAs: "ctrl", bindToController: { data: "=", itemTemplateUrl: "=", autoSlide: "@?", autoSlideTime: "@?" }, link: link } } angular.module("jkAngularCarousel").directive("jkCarousel", [CarouselDirective]) }(), function () { angular.module("jkAngularCarousel.templates", []).run(["$templateCache", function ($templateCache) { $templateCache.put("carousel-directive.html", '<div class="jk-carousel" >\n\n  <div class="slides-container" layout="row" >\n    <div\n      ng-repeat="slideItem in ctrl.cloneData"\n      class="slide"\n    >\n      <div ng-include="ctrl.itemTemplateUrl" ></div>\n    </div>\n  </div>\n\n  <md-button class="md-icon-button left-arrow-button" >\n    <md-icon ng-click="ctrl.navigateLeft()" >chevron_left</md-icon>\n  </md-button>\n\n  <md-button class="md-icon-button right-arrow-button" >\n    <md-icon ng-click="ctrl.navigateRight()" >chevron_right</md-icon>\n  </md-button>\n\n  <md-radio-group\n    class="radio-buttons-container"\n    layout="row"\n    ng-model="ctrl.radioButtonIndex"\n    layout-align="center center"\n    ng-change="ctrl.onRadioButtonClick()" >\n    <md-radio-button\n      ng-repeat="item in ctrl.data"\n      ng-value="$index"\n      aria-label="$index" >\n    </md-radio-button>\n  </md-radio-group>\n\n</div>\n') }]) }();